------------------------------------
Variables переменные
------------------------------------

Переменная - это ссылка на ячейку в памяти, в которой хранится значение. 

Переменная - это контейнер для хранения значения, которые мы можем использовать в коде.

Переменные могут содержать: 
- строки 
- числа
- структуры данных
- функции 

------------------------------------
Рекомендации, именования
------------------------------------

1. Число в начале имени переменных не допустимо (вызовет ошибку)
2. Рекомендуется именование в стиле нижний camelCase
3. Имена переменных чувствительны к регистру username отличается от userName 
4. Имена переменных должны быть интуитивны понятными
5. Имена переменных должны отвечать на вопросы "кто ?" "что ?"
6. Запрещено использовать зарезервированные слова в JavaScript 

------------------------------------
Способы объявления переменных
------------------------------------

a = 1

Имеет глобальную или функциональную (локальную) область видимости и не имеет блочную.

С этим способом не работает механизм hoisting 

На верхнем уровне создается свойство глобального объекта window

Не работает в строгом режиме 'use strict'

'use strict' - это директива, которая активирует строгий режим (запускает версию ES6+) 

в строгом режиме 'use strict' объявление и инициализация переменных возможна только с применением операторов для объявления переменных

------------------------------------

var b = 2

Имеет глобальную или функциональную (локальную) область видимости и не имеет блочную.

На верхнем уровне создается свойство глобального объекта window (как и с оператором function)

Работает механизм hoisting, значение всегда undefined.

------------------------------------

let c = 3

Имеет блочную область видимости, значение изменяемое.

На верхнем уровне с оператором let не создается свойство глобального объекта window.

Не работает механизм hoisting ( ReferenceError ).

------------------------------------

const d = 4

Имеет блочную область видимости, значение не изменяемое.

На верхнем уровне с оператором let не создается свойство глобального объекта window.

Не работает механизм hoisting ( ReferenceError ).

------------------------------------

const myObject = {} 

Возможно изменять свойства объекта myObject, но при этом изменить значение переменной myObject мы не можем.

------------------------------------

const myArray = []

Возможно изменять элементы массива myArray, но при этом изменить значение переменной myArray мы не можем.

------------------------------------

import data from './data/data.js'

Условно с помощью оператора import обьявляем переменную data, которой условно присваиваем с помощью оператора from то значение, которое экспортируется по пути к файлу.

------------------------------------
Области видимости 
------------------------------------

scope - область видимости.

Область видимости - это область где элемент доступен.

------------------------------------

global scope - глобальная область видимости, это область видимости за пределами функции.

Все что создается снаружи функции, условных конструкций, циклов, то есть за пределами блока, это находится во внешней глобальной области видимости.

Глобальные переменные делают код хрупким и рекомендуются по возможности избегать глобальные области видимости.

Глобальное доступно везде.

------------------------------------

local scope - локальная (функциональная) область видимости, это область видимости внутри функции между фигурными скобками.

Локальное не доступно снаружи.

------------------------------------

block scope - блочная область видимости (ES6, let, const), это область видимости внутри условных конструкций и циклов.

------------------------------------

lexical scope - это механизм поиска движком JS значений переменных, который ищет значение в текущей области видимости и если значение не найдено, то идет на уровень выше, пока не упрется в тупик.

------------------------------------

















